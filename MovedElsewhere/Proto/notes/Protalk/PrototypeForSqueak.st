SystemOrganization addCategory: #PrototypeForSqueak!Behavior subclass: #Type	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PrototypeForSqueak'!!Type commentStamp: 'akuhn 11/15/2007 13:16' prior: 0!p := Type clone.p class == p. "--> true"pp := p clone.pp foo.pp foo: 3.pp foo. "--> 3"ppp := pp clone.ppp foo.ppp foo: #bar.ppp foo ~= pp foo. "--> true"{ p foo. pp foo. ppp foo }.v := pp clone: 3.	v superclass == pp.v class == v.slot := pp clone: 1.x := Type clone clone clone.x methodDictionary at: #zork put: slot.x methodDictionary at: #zork: put: slot.x zork.x zork: 42.x zork.!!Type class methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 17:13'!clone	| clone |	clone := self basicNew.	clone superclass: self.	clone methodDictionary: MethodDictionary new.	clone setFormat: self format.	clone primitiveChangeClassTo: clone basicNew.	^clone! !!Type class methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 23:15'!clone: size	| clone temp |	temp := self basicNew.	temp superclass: self.	temp methodDictionary: MethodDictionary new.	temp setFormat: 392.	clone := temp basicNew: size.	clone superclass: self.	clone methodDictionary: MethodDictionary new.	clone setFormat: temp format.	clone primitiveChangeClassTo: clone basicNew.	^clone! !!Type class methodsFor: 'as yet unclassified' stamp: 'akuhn 11/15/2007 13:14'!slot	| slot |	slot := self clone: 1.	slot compile: 'run: selector with: arguments in: receiver	selector last == $:		ifTrue: [ (receiver methodDictionary at: selector ifAbsent: [ nil ]) == self			ifTrue: [ self basicAt: 1 put: arguments first ]			ifFalse: [ receiver at: selector put: arguments first ]]		ifFalse: [ ^self basicAt: 1 ]'.	^slot! !!Type methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 23:19'!at: selector put: value	| cm slot |	slot := Type slot.	cm := self methodDictionary at: (selector copyWithout: $:) asSymbol  ifAbsent:[nil].	cm ifNil: [self methodDictionary at: (selector copyWithout: $:) asSymbol put: slot.			self methodDictionary at: selector put: slot.			self perform: selector with: value]	! !!Type methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 17:14'!clone	| clone |	clone := self basicNew.	clone superclass: self.	clone methodDictionary: MethodDictionary new.	clone setFormat: self format.	clone primitiveChangeClassTo: clone basicNew.	^clone! !!Type methodsFor: 'as yet unclassified' stamp: 'akuhn 11/14/2007 18:57'!clone: size	| clone temp |	temp := self basicNew.	temp superclass: self.	temp methodDictionary: MethodDictionary new.	temp setFormat: 392.	clone := temp basicNew: size.	clone superclass: self.	clone methodDictionary: MethodDictionary new.	clone setFormat: temp format.	clone primitiveChangeClassTo: clone basicNew.	^clone! !!Type methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 17:21'!doesNotUnderstand: aMessage	aMessage arguments size = 0 ifTrue:[^nil].	aMessage arguments size = 1 ifTrue:[^self at: aMessage selector put: aMessage arguments first].	super doesNotUnderstand: aMessage! !!Type methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 23:22'!parent	^self superclass! !!Type methodsFor: 'as yet unclassified' stamp: 'akuhn 11/15/2007 13:10'!run: selector with: arguments in: receiver	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'ms 11/14/2007 23:17'!slot	^self clone: 1! !